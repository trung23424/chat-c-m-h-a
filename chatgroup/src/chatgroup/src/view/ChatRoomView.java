package view;

import view.components.MessageBubble;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;



import java.awt.*;

import dao.ChatRoomDAO;
import java.util.List;

import dao.MessageDAO;
import dao.RoomDAO;
import model.Message;
import model.User;
import dao.RoomMemberDAO;

import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.security.PublicKey;
import java.util.Base64;
import client.SocketClientHandler;
import security.MyKeyManager;



public class ChatRoomView extends JFrame {
    private JList<String> roomList;
    private JPanel chatArea;
    private JScrollPane scrollPane;
    private JTextField txtMessage;
    private JButton btnSend;
    private DefaultListModel<String> memberListModel;
    private JList<String> memberList;
    private Socket socket;
    private PrintWriter out;
    private BufferedReader in;
    private DefaultListModel<String> allRoomListModel;
    private JList<String> allRoomList;
    private JButton btnJoinRoom, btnCreateRoom, btnLeaveRoom;
    private DefaultListModel<String> roomListModel;
    private User user;
    private String selectedRoom;
    private String currentRoomName;
    private String username; // khai b√°o ·ªü ƒë·∫ßu l·ªõp
    private String selectedRoomName;
    private String currentRoom;
    private JList<String> listJoinedRooms;
    private JScrollPane scrollPaneJoinedRooms;



    public ChatRoomView(String currentUser) {
    	this.username = currentUser;

        setTitle("üí¨ Chat nh√≥m - " + currentUser);
        try {
            // T·∫£i ho·∫∑c t·∫°o c·∫∑p kh√≥a RSA
            MyKeyManager.generateAndSaveKeyPair();

            socket = new Socket("localhost", 5000); // ho·∫∑c c·ªïng b·∫°n d√πng
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8), true);
            out.println(currentUser); // G·ª≠i t√™n khi m·ªõi k·∫øt n·ªëi
           

            // G·ª≠i public key l√™n server
            PublicKey myPublicKey = MyKeyManager.getPublicKey();
            String encodedKey = Base64.getEncoder().encodeToString(myPublicKey.getEncoded());
            out.println("/publickey " + currentUser + " " + encodedKey);
            
            client.SocketClientHandler socketHandler = new client.SocketClientHandler(in, this, currentUser);
            new Thread(socketHandler).start();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "‚ùå L·ªói kh·ªüi t·∫°o client: " + e.getMessage());
            dispose(); // ƒë√≥ng c·ª≠a s·ªï n·∫øu l·ªói
        }

        setSize(1000, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout(10, 10));
        getContentPane().setBackground(new Color(245, 245, 245));

        Font font = new Font("Segoe UI", Font.PLAIN, 14);
        Color accent = new Color(0, 120, 215);

        // ===== TR√ÅI: Danh s√°ch ph√≤ng =====
        roomListModel = new DefaultListModel<>();
        roomList = new JList<>(roomListModel);

        // üß† L·∫•y danh s√°ch ph√≤ng ƒë√£ tham gia t·ª´ DB
        List<String> joinedRooms = RoomDAO.getJoinedRooms(currentUser);
        for (String room : joinedRooms) {
            roomListModel.addElement(room);
        }
        roomList = new JList<>(roomListModel);

        roomList.setFont(font);
        roomList.setBackground(Color.WHITE);
        roomList.setFixedCellHeight(40);
        roomList.setSelectionBackground(accent);
        roomList.setSelectionForeground(Color.WHITE);
        JScrollPane roomScroll = new JScrollPane(roomList);
        roomScroll.setPreferredSize(new Dimension(180, 0));
        roomScroll.setBorder(BorderFactory.createTitledBorder("üóÇ Ph√≤ng chat"));
        add(roomScroll, BorderLayout.WEST);
        
        roomList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                String selectedRoom = roomList.getSelectedValue();
                if (selectedRoom != null && out != null) {

                    // ‚úÖ G·ª≠i l·ªánh join ph√≤ng (gi√∫p server bi·∫øt b·∫°n ƒëang ·ªü ph√≤ng n√†o)
                    out.println("/join " + selectedRoom);
                    selectedRoomName = selectedRoom;
                    currentRoom = selectedRoom; // ‚úÖ D√≤ng n√†y s·ª≠a l·ªói g·ª≠i tin nh·∫Øn

                    // ‚úÖ X√≥a khung chat c≈©
                    chatArea.removeAll();
                    chatArea.revalidate();
                    chatArea.repaint();

                    // ‚úÖ Load l·∫°i tin nh·∫Øn c≈© t·ª´ DB
                    loadRoomData(selectedRoom, currentUser);

                    // ‚úÖ Load l·∫°i danh s√°ch th√†nh vi√™n trong ph√≤ng
                    List<String> members = RoomDAO.getMembersInRoom(selectedRoom);
                    memberListModel.clear();
                    for (String member : members) {
                        memberListModel.addElement(member);
                    }
                }
            }
        });



     // ===== PH·∫¢I: Danh s√°ch th√†nh vi√™n (g·∫Øn v·ªõi ph√≤ng ƒëang ch·ªçn) =====
        memberListModel = new DefaultListModel<>();
        memberListModel.addElement(currentUser); // t·∫°m th·ªùi
        memberList = new JList<>(memberListModel);
        memberList.setFont(font);
        memberList.setBackground(Color.WHITE);
        memberList.setFixedCellHeight(35);
        JScrollPane memberScroll = new JScrollPane(memberList);

        // G√≥i v√†o panel ri√™ng
        JPanel memberPanel = new JPanel(new BorderLayout());
        memberPanel.setBorder(BorderFactory.createTitledBorder("üë• Th√†nh vi√™n"));
        memberPanel.add(memberScroll, BorderLayout.CENTER);
        memberPanel.setPreferredSize(new Dimension(160, 120)); // chi·ªÅu cao th√†nh vi√™n

        // ===== GI·ªÆA: Khung chat bubble =====
        JPanel centerPanel = new JPanel(new BorderLayout(8, 8));
        centerPanel.setBorder(new EmptyBorder(10, 0, 10, 0));
        centerPanel.setBackground(Color.WHITE);

        chatArea = new JPanel();
        chatArea.setLayout(new BoxLayout(chatArea, BoxLayout.Y_AXIS));
        chatArea.setBackground(Color.WHITE);
        chatArea.setBorder(new EmptyBorder(10, 10, 10, 10));

        scrollPane = new JScrollPane(chatArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setBorder(BorderFactory.createTitledBorder("üí¨ Tin nh·∫Øn"));
        centerPanel.add(scrollPane, BorderLayout.CENTER);

        JPanel inputPanel = new JPanel(new BorderLayout(5, 5));
        txtMessage = new JTextField();
        txtMessage.setFont(font);
        txtMessage.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 200)),
                new EmptyBorder(8, 12, 8, 12)
        ));

        btnSend = new JButton("G·ª≠i");
        btnSend.setBackground(accent);
        btnSend.setForeground(Color.WHITE);
        btnSend.setFocusPainted(false);
        btnSend.setPreferredSize(new Dimension(80, 35));

        inputPanel.add(txtMessage, BorderLayout.CENTER);
        inputPanel.add(btnSend, BorderLayout.EAST);
        inputPanel.setBorder(new EmptyBorder(0, 10, 10, 10));

        centerPanel.add(inputPanel, BorderLayout.SOUTH);
        add(centerPanel, BorderLayout.CENTER);

        // ===== PH·∫¢I: Panel qu·∫£n l√Ω ph√≤ng =====
        JPanel roomPanel = new JPanel();
        roomPanel.setLayout(new BorderLayout(5, 5));
        roomPanel.setBorder(BorderFactory.createTitledBorder("üè† Ph√≤ng c√≥ s·∫µn"));
        roomPanel.setBackground(Color.WHITE);

        // Danh s√°ch t·∫•t c·∫£ ph√≤ng
        allRoomListModel = new DefaultListModel<>();
        for (String roomName : dao.RoomDAO.getAllRooms()) {
            allRoomListModel.addElement(roomName);
        }


        allRoomList = new JList<>(allRoomListModel);
        allRoomList.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        allRoomList.setFixedCellHeight(35);
        JScrollPane allRoomScroll = new JScrollPane(allRoomList);
        roomPanel.add(allRoomScroll, BorderLayout.CENTER);

        // N√∫t thao t√°c
        JPanel btnPanel = new JPanel(new GridLayout(3, 1, 5, 5));
        btnJoinRoom = new JButton("üîÑ Tham gia");
        btnCreateRoom = new JButton("‚ûï T·∫°o ph√≤ng");
        btnLeaveRoom = new JButton("‚ùå R·ªùi ph√≤ng");
        
        
        btnJoinRoom.addActionListener(e -> {
            int selectedIndex = allRoomList.getSelectedIndex();
            if (selectedIndex != -1 && out != null) {
                String selectedRoom = allRoomListModel.getElementAt(selectedIndex);

                // G·ª≠i l·ªánh /join ƒë·∫øn server
                out.println("/join " + currentRoomName + selectedRoom);

                // ‚úÖ Th√™m v√†o danh s√°ch ph√≤ng b√™n tr√°i n·∫øu ch∆∞a c√≥
                if (!roomListModel.contains(selectedRoom)) {
                    roomListModel.addElement(selectedRoom);
                }

                // ‚úÖ ƒê·∫∑t selected ƒë·ªÉ ch·ªçn lu√¥n ph√≤ng v·ª´a tham gia
                roomList.setSelectedValue(selectedRoom, true);

                // ‚úÖ Xo√° tin c≈© ·ªü khung chat
                chatArea.removeAll();
                chatArea.revalidate();
                chatArea.repaint();

                // üî• B·ªî SUNG: T·∫£i danh s√°ch th√†nh vi√™n t·ª´ DB
                List<String> members = RoomDAO.getMembersInRoom(selectedRoom);
                memberListModel.clear();
                for (String member : members) {
                    memberListModel.addElement(member);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn ph√≤ng ƒë·ªÉ tham gia.");
            }
        });

        
        btnCreateRoom.addActionListener(e -> {
            String newRoom = JOptionPane.showInputDialog(this, "Nh·∫≠p t√™n ph√≤ng m·ªõi:");
            if (newRoom != null && !newRoom.trim().isEmpty()) {
                newRoom = newRoom.trim();

                // Ki·ªÉm tra ph√≤ng ƒë√£ t·ªìn t·∫°i trong danh s√°ch ch∆∞a
                if (!allRoomListModel.contains(newRoom)) {
                    allRoomListModel.addElement(newRoom); // th√™m v√†o danh s√°ch ph√≤ng b√™n ph·∫£i
                }

                // G·ª≠i l·ªánh t·∫°o v√† tham gia ph√≤ng m·ªõi
                if (out != null) {
                    out.println("/create " + newRoom);
                    out.println("/join " + newRoom);
                }

                // C·∫≠p nh·∫≠t UI tr√°i
                if (!roomListModel.contains(newRoom)) {
                    roomListModel.addElement(newRoom);
                }
                roomList.setSelectedValue(newRoom, true);
                chatArea.removeAll();
                chatArea.revalidate();
                chatArea.repaint();
            }
        });
        
        btnLeaveRoom.addActionListener(e -> {
            String currentRoom = roomList.getSelectedValue();
            if (currentRoom != null && out != null) {
                out.println("/leave " + currentRoom); // g·ª≠i l·ªánh r·ªùi ph√≤ng

                // X√≥a kh·ªèi danh s√°ch tr√°i
                roomListModel.removeElement(currentRoom);

                // Clear giao di·ªán chat
                chatArea.removeAll();
                chatArea.revalidate();
                chatArea.repaint();
            } else {
                JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn ph√≤ng ƒë·ªÉ r·ªùi.");
            }
        });





        btnPanel.add(btnJoinRoom);
        btnPanel.add(btnCreateRoom);
        btnPanel.add(btnLeaveRoom);
        roomPanel.add(btnPanel, BorderLayout.SOUTH);

        // ===== G·ªòP TH√ÄNH PANEL B√äN PH·∫¢I CH√çNH =====
        JPanel rightMainPanel = new JPanel(new BorderLayout(5, 5));
        rightMainPanel.setPreferredSize(new Dimension(160, 0));
        rightMainPanel.add(memberPanel, BorderLayout.NORTH);
        rightMainPanel.add(roomPanel, BorderLayout.CENTER);
        add(rightMainPanel, BorderLayout.EAST);


        // ===== Test demo =====
//        addMessage("trung: hello", false);
//        addMessage("m√¨nh: hello b·∫°n!", true);

        btnSend.addActionListener(e -> {
            String text = txtMessage.getText().trim();

            ;
			// üîç Ki·ªÉm tra xem ƒë√£ ch·ªçn ph√≤ng ch∆∞a
            if (currentRoom == null || currentRoom.isEmpty()) {
                JOptionPane.showMessageDialog(this, "‚ùó B·∫°n ch∆∞a ch·ªçn ph√≤ng ƒë·ªÉ g·ª≠i tin nh·∫Øn!");
                return;
            }

            if (!text.isEmpty() && out != null) {
                out.println("/rsaroommsg " + text);
                txtMessage.setText("");
            } else {
                System.err.println("‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c tin: text r·ªóng ho·∫∑c out null");
            }
        });
        txtMessage.addActionListener(e -> btnSend.doClick());
        
        listJoinedRooms = new JList<>();
        scrollPaneJoinedRooms = new JScrollPane();
        scrollPaneJoinedRooms.setViewportView(listJoinedRooms);
        
        listJoinedRooms.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    String selectedRoom = listJoinedRooms.getSelectedValue();
                    if (selectedRoom != null) {
                        currentRoom = selectedRoom;
                        System.out.println("‚úÖ B·∫°n ƒë√£ ch·ªçn ph√≤ng: " + currentRoom); // debug
                    }
                }
            }
        });



        setVisible(true);
    }

    public void addMessage(String text, boolean isMine) {
        // B·ªè qua c√°c d√≤ng th√¥ng b√°o h·ªá th·ªëng
        if (text.startsWith("üì• ") || text.startsWith("üì§ ") || text.startsWith("‚ùå ") || text.startsWith("üîî ")) {
            return;
        }

        MessageBubble bubble = new MessageBubble(text, isMine);
        chatArea.add(bubble);
        chatArea.revalidate();
        chatArea.repaint();
        scrollPane.getVerticalScrollBar().setValue(scrollPane.getVerticalScrollBar().getMaximum());
    }

    
    private void loadRoomData(String roomName, String currentUser) {
        // Load tin nh·∫Øn
        chatArea.removeAll();
        for (Message msg : MessageDAO.getMessagesByRoomName(roomName)) {
            // B·ªé QUA n·∫øu n·ªôi dung l√† tin h·ªá th·ªëng (c√≥ th·ªÉ b·∫Øt ƒë·∫ßu b·∫±ng bi·ªÉu t∆∞·ª£ng üì± ho·∫∑c ch·ª©a t·ª´ "ƒë√£ v√†o", "r·ªùi kh·ªèi")
            String content = msg.getContent();
            if (content.startsWith("üì±") || content.contains("ƒë√£ v√†o") || content.contains("r·ªùi kh·ªèi")) {
                continue; // b·ªè qua kh√¥ng hi·ªÉn th·ªã
            }

            boolean isMine = msg.getSenderName().equals(currentUser);
            String formatted = msg.getSenderName() + ": " + content;
            addMessage(formatted, isMine);
        }

        for (String name : RoomMemberDAO.getMembersByRoomName(roomName)) {
            memberListModel.addElement(name);
        }

        chatArea.revalidate();
        chatArea.repaint();
        scrollPane.getVerticalScrollBar().setValue(scrollPane.getVerticalScrollBar().getMaximum());
    }


}